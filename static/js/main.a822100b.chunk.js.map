{"version":3,"sources":["common/DateFormat.js","component/clock/Clock.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Date","prototype","format","f","this","valueOf","h","weekKorName","weekKorShortName","weekEngName","weekEngShortName","d","replace","$1","getFullYear","zf","getMonth","getDate","getDay","getHours","getMinutes","getSeconds","String","string","len","s","i","length","Number","toString","DigitalClock","time","t","className","AnalogClock","hoursDeg","minutesDeg","secondsDeg","hoursStyle","transform","minutesStyle","secondsStyle","style","Clock","useState","setTime","useEffect","interval","setInterval","clearInterval","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a822100b.chunk.js","sourcesContent":["Date.prototype.format = function (f) {\r\n    if (!this.valueOf()) return \" \";\r\n    var weekKorName = [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"];\r\n    var weekKorShortName = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n    var weekEngName = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    var weekEngShortName = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n    var d = this;\r\n    var h;\r\n\r\n    return f.replace(/(yyyy|yy|MM|dd|KS|KL|ES|EL|HH|hh|mm|ss|a\\/p)/gi, function ($1) {\r\n        switch ($1) {\r\n            case \"yyyy\": return d.getFullYear(); // 년 (4자리)\r\n            case \"yy\": return (d.getFullYear() % 1000).zf(2); // 년 (2자리)\r\n            case \"MM\": return (d.getMonth() + 1).zf(2); // 월 (2자리)\r\n            case \"dd\": return d.getDate().zf(2); // 일 (2자리)\r\n            case \"KS\": return weekKorShortName[d.getDay()]; // 요일 (짧은 한글)\r\n            case \"KL\": return weekKorName[d.getDay()]; // 요일 (긴 한글)\r\n            case \"ES\": return weekEngShortName[d.getDay()]; // 요일 (짧은 영어)\r\n            case \"EL\": return weekEngName[d.getDay()]; // 요일 (긴 영어)\r\n            case \"HH\": return d.getHours().zf(2); // 시간 (24시간 기준, 2자리)\r\n            case \"hh\": return ((h = d.getHours() % 12) ? h : 12).zf(2); // 시간 (12시간 기준, 2자리)\r\n            case \"mm\": return d.getMinutes().zf(2); // 분 (2자리)\r\n            case \"ss\": return d.getSeconds().zf(2); // 초 (2자리)\r\n            case \"a/p\": return d.getHours() < 12 ? \"오전\" : \"오후\"; // 오전/오후 구분\r\n            default: return $1;\r\n        }\r\n    });\r\n};\r\n\r\nString.prototype.string = function (len) { var s = '', i = 0; while (i++ < len) { s += this; } return s; };\r\nString.prototype.zf = function (len) { return \"0\".string(len - this.length) + this; };\r\nNumber.prototype.zf = function (len) { return this.toString().zf(len); };","import React, { useState, useEffect } from 'react';\r\nimport './Clock.scss';\r\nimport '../../common/DateFormat'\r\nimport { Transform } from 'stream';\r\n\r\ninterface clockProps {\r\n    time: Date;\r\n};\r\n\r\nconst DigitalClock = ({time}: clockProps) => {\r\n    //@ts-ignore\r\n    const t = String(time.format('yyyy-MM-dd ES'));\r\n    return (\r\n        <div className={\"digitalClock\"}>\r\n            <span>{t}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AnalogClock = ({time}: clockProps) => {\r\n    const total = (time.getHours() * 60 * 60) + (time.getMinutes() * 60) + time.getSeconds(); \r\n    const hoursDeg = (total * 0.00833333) % 360;\r\n    const minutesDeg = (((time.getMinutes() * 60) + time.getSeconds()) * 0.1) % 360;\r\n    const secondsDeg = time.getSeconds() * 6;\r\n\r\n    const hoursStyle = {\r\n        transform: `rotate(${hoursDeg}deg)`\r\n    }\r\n    \r\n    const minutesStyle = {\r\n        transform: `rotate(${minutesDeg}deg)`\r\n    }\r\n\r\n    const secondsStyle = {\r\n        transform: `rotate(${secondsDeg}deg)`\r\n    }\r\n\r\n    return (\r\n        <div className={\"analogClock\"}>\r\n            <div className={\"hour\"} style={hoursStyle}></div>\r\n            <div className={\"minute\"} style={minutesStyle}></div>\r\n            <div className={\"second\"} style={secondsStyle}></div>\r\n            <div className={\"pin\"}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst Clock = () => {\r\n    const [time, setTime] = useState(new Date());\r\n    useEffect(() => {\r\n        const interval = setInterval(\r\n            () => setTime(new Date()),\r\n            1000\r\n          );\r\n          return () => {\r\n            clearInterval(interval);\r\n          }\r\n    }, []);\r\n    \r\n\r\n    return(\r\n        <div className={\"clock\"}>\r\n            <AnalogClock time={time}/>\r\n            <DigitalClock time={time}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Clock;","import React from 'react';\r\nimport './App.scss';\r\nimport Clock from \"./component/clock/Clock\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Clock />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["common/DateFormat.ts","component/clock/type.ts","component/clock/Clock.tsx","component/todoList/TodoList.tsx","component/appMenu/AppMenu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DateFormat","d","format","h","KL","KS","EL","ES","zf","num","len","s","i","toString","length","replace","__","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getDay","clockList","arr","Array","from","fill","a","x","y","z","hms","j","DigitalClock","date","className","AnalogClock","h_s","m_s","minutesDeg","secondsDeg","hoursStyle","transform","minutesStyle","secondsStyle","style","DigilogClocks","digilogClockList","ns","h1","Math","floor","h2","m1","m2","s1","s2","map","digilogClocks","index","key","clock","Clock","useState","Date","setDate","digilog","setDigilog","useEffect","interval","setInterval","clearInterval","clockClick","useCallback","onClick","TodoList","AppIcon","title","AppMenu","setAppState","App","appState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d484fd06.chunk.js","sourcesContent":["const DateFormat = ((d: Date, format: string) => {\r\n    const KL = [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"];\r\n    const KS = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n    const EL = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    const ES = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n    let h;\r\n\r\n    let zf = ((num: number, len: number) => {\r\n        let s = '', i = 0;\r\n        while (i++ < len - num.toString().length) s += '0';\r\n        return s + num.toString();\r\n    });\r\n\r\n    return format.replace(/(yyyy|yy|MM|dd|KS|KL|ES|EL|HH|hh|mm|ss|a\\/p)/gi, ((__: any) => {\r\n        switch (__) {\r\n            case \"yyyy\": return d.getFullYear();\r\n            case \"yy\": return zf((d.getFullYear() % 1000), 2);\r\n            case \"MM\": return zf((d.getMonth() + 1),2);\r\n            case \"dd\": return zf(d.getDate(),2);\r\n            case \"HH\": return zf(d.getHours(),2);\r\n            case \"hh\": return zf(((h = d.getHours() % 12) ? h : 12), 2);\r\n            case \"mm\": return zf(d.getMinutes(),2);\r\n            case \"ss\": return zf(d.getSeconds(),2);\r\n            case \"KL\": return KL[d.getDay()];\r\n            case \"KS\": return KS[d.getDay()];\r\n            case \"EL\": return EL[d.getDay()];\r\n            case \"ES\": return ES[d.getDay()];\r\n            case \"a/p\": return d.getHours() < 12 ? \"AM\" : \"PM\";\r\n            default: return __;\r\n        }\r\n    }));\r\n});\r\nexport default DateFormat;","export interface clockProps {\r\n    date: Date;\r\n}\r\n\r\nexport const clockList = (() => {\r\n    let arr = Array.from(Array(12), () => Array(36).fill(null));\r\n    let a = ['a', 'b', 'c', 'd', 'e', 'f'];\r\n    let x = 0;\r\n    let y = 0;\r\n    let z = 1;\r\n    let hms = 'h';\r\n    for(let i=0; i<12; i++){\r\n        for(let j=0; j<36; j++){\r\n            if(j==0){\r\n                hms = 'h';\r\n            }else if(j==12) {\r\n                hms = 'm';\r\n            }else if(j==24){\r\n                hms = 's';\r\n            }\r\n\r\n            if(i<3 || i>8 || j===0 || j===35 || (i===3 && (j===11 || j===12)) || (i===3 && (j===23 || j===24)) || (i===8 && (j===11 || j===12)) || (i===8 && (j===23 || j===24))){\r\n                arr[i][j] = 'xx';\r\n            }\r\n            else if((i===4 && j===11) || (i===6 && j===11) || (i===4 && j===23) || (i===6 && j===23)){\r\n                arr[i][j] = 'aa'\r\n            }\r\n            else if((i===4 && j===12) || (i===6 && j===12) || (i===4 && j===24) || (i===6 && j===24)){\r\n                arr[i][j] = 'ab'\r\n            }\r\n            else if((i===5 && j===11) || (i===7 && j===11) || (i===5 && j===23) || (i===7 && j===23)){\r\n                arr[i][j] = 'ba'\r\n            }\r\n            else if((i===5 && j===12) || (i===7 && j===12) || (i===5 && j===24) || (i===7 && j===24)){\r\n                arr[i][j] = 'bb'\r\n            }\r\n            else {\r\n                arr[i][j] = hms + z + ' ' + a[x] + a[y++];\r\n                if(y>4){\r\n                    z++;\r\n                    y=0;\r\n                    if(z>2){\r\n                        z = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(i>2){\r\n            x++;\r\n            x>5 && (x=0);\r\n        }\r\n    }\r\n    return arr;\r\n});","import React, { useState, useEffect, useCallback } from 'react';\r\nimport './Clock.scss';\r\nimport DateFormat from '../../common/DateFormat';\r\nimport { clockProps, clockList } from './type';\r\n\r\nconst DigitalClock = ({ date }: clockProps) => {\r\n    return (\r\n        <div className={'digitalClock'}>\r\n            <p>\r\n                <span>{DateFormat(date, 'a/p hh:mm:ss')}</span>\r\n                <span>{DateFormat(date, 'yyyy-MM-dd ES')}</span>\r\n            </p>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AnalogClock = ({ date }: clockProps) => {\r\n    const h_s = date.getHours() * 60 * 60;\r\n    const m_s = date.getMinutes() * 60;\r\n    const s = date.getSeconds();\r\n    const hoursDeg = ((h_s + m_s + s) * 0.00833333) % 360;\r\n    const minutesDeg = ((m_s + s) * 0.1) % 360;\r\n    const secondsDeg = s * 6;\r\n\r\n    const hoursStyle = {\r\n        transform: `rotate(${hoursDeg}deg)`\r\n    };\r\n\r\n    const minutesStyle = {\r\n        transform: `rotate(${minutesDeg}deg)`\r\n    };\r\n\r\n    const secondsStyle = {\r\n        transform: `rotate(${secondsDeg}deg)`\r\n    };\r\n\r\n    return (\r\n        <div className={'analogClock'}>\r\n            <div className={'hour'} style={hoursStyle}></div>\r\n            <div className={'minute'} style={minutesStyle}></div>\r\n            <div className={'second'} style={secondsStyle}></div>\r\n            <div className={'pin'}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DigilogClocks = (({ date, digilogClockList }: any) => {\r\n    const ns = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\r\n    const h1 = Math.floor(date.getHours() / 10);\r\n    const h2 = date.getHours() % 10;\r\n    const m1 = Math.floor(date.getMinutes() / 10);\r\n    const m2 = date.getMinutes() % 10;\r\n    const s1 = Math.floor(date.getSeconds() / 10);\r\n    const s2 = date.getSeconds() % 10;\r\n\r\n    return (\r\n        <div className={'digilogClocks'}>\r\n            <table>\r\n                <tbody>\r\n                    {\r\n                     digilogClockList.map((digilogClocks: any, index: number) => (\r\n                     <tr key={index}>\r\n                         {\r\n                             digilogClocks.map((clock: string, index: number) =>\r\n                                <td key={index}>\r\n                                    <div className={\r\n                                        'digilogClock ' + \r\n                                        clock.replace(/(h1|h2|m1|m2|s1|s2)/gi, ((__: any) => {\r\n                                            switch (__) {\r\n                                                case 'h1': return ns[h1];\r\n                                                case 'h2': return ns[h2];\r\n                                                case 'm1': return ns[m1];\r\n                                                case 'm2': return ns[m2];\r\n                                                case 's1': return ns[s1];\r\n                                                case 's2': return ns[s2];\r\n                                                default: return __;\r\n                                            }\r\n                                        }))\r\n                                        }>\r\n                                        <div className={'h'}></div>\r\n                                        <div className={'m'}></div>\r\n                                     </div>\r\n                                </td>\r\n                             )\r\n                         }\r\n                     </tr>))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst Clock = () => {\r\n    const [date, setDate] = useState(new Date());\r\n    const [digilog, setDigilog] = useState(true);\r\n    const [digilogClockList, setDigilogClockList] = useState(clockList);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(\r\n            () => setDate(new Date()),\r\n            1000\r\n        );\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, []);\r\n\r\n    const clockClick = useCallback(() => {\r\n        setDigilog(!digilog);\r\n    }, [digilog]);\r\n\r\n    return (\r\n        <div className={'clock'} onClick={clockClick}>\r\n            {!digilog ?\r\n                <>\r\n                    <AnalogClock date={date} />\r\n                    <DigitalClock date={date} />\r\n                </>\r\n                :\r\n                <DigilogClocks date={date} digilogClockList={digilogClockList} />\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Clock;","import React from 'react';\r\nimport './TodoList.scss';\r\nconst TodoList = () => {\r\n\r\n    return(\r\n        <div className={'todoList'}>\r\n            todoList\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport './AppMenu.scss';\r\nimport Clock from '../clock/Clock';\r\nimport TodoList from '../todoList/TodoList';\r\n\r\nconst AppIcon = ({title, onClick}:any) => {\r\n\r\n    return(\r\n        <div className={'appIcon'} onClick={onClick}>\r\n            <span className={'appIconName'}>{title}</span>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AppMenu = ({setAppState}: any) => {\r\n    const clockClick = () => {\r\n        setAppState(<Clock />);\r\n    };\r\n\r\n    const todoListClick = () => {\r\n        setAppState(<TodoList />);\r\n    };\r\n\r\n    return(\r\n        <div className={'appMenu'}>\r\n            <AppIcon title={'clock'} onClick={clockClick}/>\r\n            <AppIcon title={'todoList'} onClick={todoListClick}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AppMenu;","import React, { useState } from 'react';\r\nimport './App.scss';\r\nimport AppMenu from './component/appMenu/AppMenu';\r\n\r\nfunction App() {\r\n  const [appState, setAppState] = useState(<></>);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {appState}\r\n      <AppMenu setAppState={setAppState}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}